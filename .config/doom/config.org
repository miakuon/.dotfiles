#+title: Doom Emacs Config
#+author: Mia Kuon
#+description: My personal literate Doom Emacs Config

* About this config
Unlike regular config this one is literate. It means all =src block= are tangled into ~config.el~ on save and on ~doom sync~, unless ~:tangle no~. More about that [[file:~/.config/emacs/modules/config/literate/README.org][here]].

Some parts taken from [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][DT's config]]

** Header
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; Commetary: My Doom Emacs Config
#+end_src
* ID
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Mia Kuon"
      user-mail-address "mia.kuon@gmail.com"
      doom-user-dir "/home/mia/.config/doom")
#+end_src
* TODO Themes
/Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'./

*Code*:
- doom-horizon - —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Å –∫—Ä–∞—Å–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏
- doom-shades-of-purple  - –æ—á–µ–Ω—å —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è)
- doom-laserwave - —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Å –≥–æ–ª—É–±—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏
- doom-ir-black - —Å–æ–≤—Å–µ–º —á—ë—Ä–Ω–∞—è, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è

*–ß—Ç–µ–Ω–∏–µ*:
*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞*: doom-monokai-spectrum
- doom-dark+

*–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫*: doom-monokai-ristretto
- doom-rouge
- doom-dracula
- doom-gruvbox
- doom-latern

*Org*: doom-badger
*Latex*-editor-mode: doom-meltbus
*–î–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ*: doom-one

#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . fullboth))
(setq doom-theme 'doom-one)

(setq display-line-numbers-type t)
(show-paren-mode 1)
#+end_src
* TODO FONTS
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.
* Encoding
#+begin_src emacs-lisp
(set-language-environment "Russian")
(prefer-coding-system 'utf-8)
#+end_src
* TODO MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline
* TODO START PAGE
Instead of using Doom's Dashboard or the Emacs Dashboard program, I have decided to just set an custom start file as my "dashboard" since it allows me more customization options.  I have added to the 'start-mode-hook' the argument 'read-only-mode'.  This is to prevent accidental editing of the start file, and to prevent clashes with the 'start-mode' specific keybindings.  You can toggle on/off read-only-mode with 'SPC t r'.

#+begin_src emacs-lisp :tangle no
(setq initial-buffer-choice "~/.config/doom/start.org")

(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
(provide 'start-mode)
#+end_src
* TODO Org
** Org-mode
I wrapped most of this block in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults.  I have also enabled org-journal, org-superstar and org-roam by adding (+journal +pretty +roam2) to the org section of my Doom Emacs init.el.

#+BEGIN_SRC emacs-lisp
;(map! :leader
;      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/–ì—Ä–∏–º—É–∞—Ä/"
        org-default-notes-file (expand-file-name "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–í—Ö–æ–¥—è—â–µ–µ.org" org-directory)
        org-id-locations-file (expand-file-name ".orgids" org-directory)
        ;; org-ellipsis " ‚ñº " ; changes outline, default is "[...]"
        ;; org-superstar-headline-bullets-list '("‚óâ" "‚óè" "‚óã" "‚óÜ" "‚óè" "‚óã" "‚óÜ")
        ;; org-superstar-itembullet-alist '((?+ . ?‚û§) (?- . ?‚ú¶)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("archwiki" . "https://wiki.archlinux.org/index.php/")
            ("doomdir" . "/home/mia/.config/doom/%s")
            ("emacsdir" . "/home/mia/.config/emacs/%s")
            ("doom-repo" . "https://github.com/doomemacs/doomemacs/%s")
            ("wolfram" . "https://wolframalpha.com/input/?i=%s")
            ("wikipedia" . "https://en.wikipedia.org/wiki/%s")
            ("duckduckgo" . "https://duckduckgo.com/?q=%s")
            ("gmap" . "https://maps.google.com/maps?q=%s")
            ("gimages" . "https://google.com/images?q=%s")
            ("youtube" . "https://youtube.com/watch?v=%s")
            ("github" . "https://github.com/%s"))
        ;; org-table-convert-region-max-lines 20000
        org-todo-keywords         ; This overwrites the default Doom org-todo-keywords
          '((sequence             ; Tasks
              "TODO(t)"           ; A task that is ready to be tackled
              "WAIT(w)"           ; Something is holding up this task
              "STRT(s)"           ; Task is started
              "IDEA(i)"           ; An idea that needs to be moved or to be done
              "PROJ(p)"           ; A project that contains other tasks
              "HBBT(h)"           ; A habbit
              "|"                 ; The pipe necessary to separate "active" states and "inactive" states
              "DONE(d)"           ; Task has been completed
              "FAIL(f)"           ; Task has been failed
              "CANCELLED(c)" )    ; Task has been cancelled
            (sequence             ; States
              "[ ](T)"
              "[-](S)"
              "[?](W)"
              "|"
              "[X](D)")
            (sequence             ; Notes states
              "–ù–∞–ø–∏—Å–∞—Ç—å(y)"
              "–î–æ–ø–∏—Å–∞—Ç—å(l)"
              "–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å(g)"
              "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å(G)"
              "|"))))
#+end_src

** TODO Org-agenda
#+begin_src emacs-lisp
(after! org
  ;; (defvar org-agenda-subdirectory "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" "Directory in org-directory that contains all organization realted files")
  ;; (defvar org-agenda-directory (expand-file-name "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/" org-directory) "Directory with Org Agenda files")
  ;; (setq org-agenda-files (directory-files-recursively org-agenda-directory "\.org$"))
  (setq org-agenda-files
        (append
         (directory-files-recursively "~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü—Ä–æ–µ–∫—Ç—ã" "\\.org$")
         (directory-files-recursively "~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–¶–µ–Ω–Ω–æ—Å—Ç–∏" "\\.org$")
         '("~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
           "~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü–ª–∞–Ω—ã"
           "~/–ì—Ä–∏–º—É–∞—Ä/–ö–æ–Ω—Ç–∞–∫—Ç—ã"
           "~/–ì—Ä–∏–º—É–∞—Ä/–ó–∞–º–µ—Ç–∫–∏"
           "~/–ì—Ä–∏–º—É–∞—Ä/–î–Ω–µ–≤–Ω–∏–∫")))
  (setq org-agenda-file-regexp "\\.org\\'")
  (setq org-agenda-start-day "-1d"))

;; (setq
   ;; org-priority-faces
   ;; '((?A :foreground "#ff6c6b" :weight bold)
   ;;   (?B :foreground "#98be65" :weight bold)
   ;;   (?C :foreground "#c678dd" :weight bold))
   ;; org-agenda-block-separator 8411)

(use-package! org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode))

(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))))
        ("p" "–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"
         ((alltodo ""
                   ((org-super-agenda-groups
                     '((:auto-group t)
                       (:discard (:not (:tag t)))))))))
        ("d" "–ó–∞–¥–∞—á–∏ –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º"
         ((alltodo ""
           ((org-super-agenda-groups
             '((:name "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"
                :and (:deadline past :todo t))
               (:name "üü° –° –¥–µ–¥–ª–∞–π–Ω–æ–º"
                :and (:deadline future :todo t))
               (:name "‚ö™ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
                :and (:not (:deadline)) :todo t)))))))
        ("D" "–î–µ–¥–ª–∞–π–Ω—ã"
         ((alltodo ""
                  ((org-super-agenda-groups
                    '((:name "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"
                       :and (:deadline past :todo t))
                      (:name "üü° –° –¥–µ–¥–ª–∞–π–Ω–æ–º"
                       :and (:deadline future :todo t))
                      (:name "‚ö™ –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
                       :and (:not (:deadline)) :todo t)))
                   (org-agenda-prefix-format "  %12(deadline) %?-20t %s")))))
        ("g" "Get Things Done"
         ((agenda ""
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))
        ("d" "Daily View"
         ((agenda ""                             ; –ê–≥–µ–Ω–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                  ((org-agenda-span 'day)
                   (org-agenda-start-day nil)
                   (org-agenda-overriding-header "–°–µ–≥–æ–¥–Ω—è")))
          (tags "*"                            ; –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –í—Ö–æ–¥—è—â–µ–µ.org
                   ((org-agenda-files '("~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–í—Ö–æ–¥—è—â–µ–µ.org"))
                    (org-agenda-overriding-header "–í—Ö–æ–¥—è—â–∏–µ")))
          (search "CLOSED>=\"<today>\""          ; –°–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
                  ((org-agenda-overriding-header "\n–°–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è\n")))))))
#+end_src
** GTD
*** Capture templates
#+begin_src emacs-lisp :tangle yes
(defun my/org-capture-area-file ()
  "Prompt for an area-file"
  (read-file-name "–¶–µ–Ω–Ω–æ—Å—Ç—å: "
                  "~/–ì—Ä–∏–º—É–∞—Ä/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–¶–µ–Ω–Ω–æ—Å—Ç–∏/"
                  nil t nil
                  (lambda (f)
                    (and (file-regular-p f)
                         (string-match "area-.*\\.org\\'" f)))))

(defun my/org-capture-project-or-area-file ()
  "Prompt for an area- or proj-file"
   (completing-read
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª: "
    (mapcar (lambda (f) (file-relative-name f org-directory))
            (append
             (file-expand-wildcards (concat org-directory "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–¶–µ–Ω–Ω–æ—Å—Ç–∏/*/—Ü–µ–Ω–Ω–æ—Å—Ç—å-*.org"))
             (file-expand-wildcards (concat org-directory "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü—Ä–æ–µ–∫—Ç—ã/*/–ø—Ä–æ–µ–∫—Ç-*.org"))))))

(after! org
 (setq org-capture-templates
       `(("g" "GTD")
         ("gi" "Inbox" entry  (file "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–í—Ö–æ–¥—è—â–µ–µ.org")
          "* TODO %?\n:PROPERTIES:\n:ENTERED_ON: %U\n:END:"
          :prepend t :empty-lines-before 1)
         ("gm" "Meeting" entry  (file+headline "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.org" "–õ–∏—á–Ω–æ–µ")
          "* %? %^G\nSCHEDULED: %^T\n:PROPERTIES:\n:ENTERED_ON: %U\n:END:"
          :prepend t)
         ("gc" "Current" entry (file "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–¢–µ–∫—É—â–µ–µ.org")
          "* TODO %?\nSCHEDULED: %t\n:PROPERTIES:\n:ENTERED_ON: %U\n:END:"
          :prepend t :empty-lines-before 1)
         ("gh" "Habbit" entry (file+headline my/org-capture-area-file "–ü—Ä–∏–≤—ã—á–∫–∏")
          "* HBBT %?\nSCHEDULED: <%<%Y-%m-%d %a %H:00> +1d>\n:PROPERTIES:\n:STYLE:           Habbit\n:REPEAT_TO_STATE: HBBT\n:END:\n:PROPERTIES:\n:ENTERED_ON: %U\n:END:"
          :prepend t)
         ("gt" "TODO" entry (file+headline my/org-capture-project-or-area-file "–ó–∞–¥–∞—á–∏")
          "* TODO %? %^G\nDEADLINE: %^{Deadline}t SCHEDULED: %^{Scheduled}T\n:PROPERTIES:\n:ENTERED_ON: %U\n:END:"
          :prepend t)
         ("gn" "Link current note" item (file+headline my/org-capture-project-or-area-file "–ó–∞–º–µ—Ç–∫–∏")
          "- %A%?"
          :prepend nil :unnarrowed t)
         ("gp" "Link current project" item (file+headline my/org-capture-project-or-area-file "–ü—Ä–æ–µ–∫—Ç—ã")
          "- %A%?"
          :prepend nil :unnarrowed t)
         ("ga" "Link current area" item (file+headline my/org-capture-area-file "–¶–µ–Ω–Ω–æ—Å—Ç–∏")
          "- %A%?"
          :prepend nil :unnarrowed t)
         ;; ("j" "Journal")
         ;; ("jd" "Daily" entry
         ;;  (file+olp+datetree +org-capture-journal-file)
         ;;  "* %U %?\n%i\n%a" :prepend t)
         ;; ("jw" "Weekly" entry)
         ;; ("jm" "Monthly" entry)
         ;; ("jy" "Yearly" entry)
         ("p" "Templates for projects")
         ("pt" "Project-local todo" entry
          (file+headline +org-capture-project-todo-file "Inbox")
          "* TODO %?\n%i\n%a" :prepend t)
         ("pn" "Project-local notes" entry
          (file+headline +org-capture-project-notes-file "Inbox")
          "* %U %?\n%i\n%a" :prepend t)
         ("pc" "Project-local changelog" entry
          (file+headline +org-capture-project-changelog-file "Unreleased")
          "* %U %?\n%i\n%a" :prepend t)
         ("pj" "Job Application" entry (file "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü—Ä–æ–µ–∫—Ç—ã/–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ/—Å–ø–∏—Å–æ–∫-–æ—Ç–∫–ª–∏–∫–∏_–Ω–∞_–≤–∞–∫–∞–Ω—Å–∏–∏.org")
          "* TODO %? –≤ %^{–ö–æ–º–ø–∞–Ω–∏—è}
DEADLINE: %^{–î–µ–¥–ª–∞–π–Ω –≤–∞–∫–∞–Ω—Å–∏–∏}t SCHEDULED: %^{–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å}t
:PROPERTIES:
:DATE_APPLIED: %t
:POSITION: %^{–ü–æ–∑–∏—Ü–∏—è}
:SOURCE: %^{–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏|hh.ru|LinkedIn|website|Telegram}
:CONTACT: %^{–ö–æ–Ω—Ç–∞–∫—Ç}
:STATUS: %^{–°—Ç–∞—Ç—É—Å|–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞|–ñ–¥—É –æ—Ç–≤–µ—Ç–∞|–û—Ç–∫–∞–∑}
:LOCATION: %^{–õ–æ–∫–∞—Ü–∏—è|–ú–æ—Å–∫–≤–∞|–£–¥–∞–ª—ë–Ω–Ω–æ}
:END:
- [ ] " :prepend t :empty-lines-before 1)
         ("o" "Centralized templates for projects")
         ("ot" "Project todo" entry
          #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
         ("on" "Project notes" entry
          #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
         ("oc" "Project changelog" entry
          #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))))
#+end_src
*** Other
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-log-into-drawer t)
  (setq org-log-reschedule 'time))
#+end_src
** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

ERROR: –ù–µ—Ç –ø–∞–∫–µ—Ç–∞ ~org-auto-tangle~
#+begin_src emacs-lisp :tangle no
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun dt/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i t" #'dt/insert-auto-tangle-tag)
#+end_src
** Org fonts
I have created an interactive function for each color scheme (M-x dt/org-colors-*).  These functions will set appropriate colors and font attributes for org-level fonts and the org-table font.

#+begin_src emacs-lisp :tangle no
(defun dt/org-colors-doom-one ()
  "Enable Doom One colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#51afef" ultra-bold)
         (org-level-2 1.6 "#c678dd" extra-bold)
         (org-level-3 1.5 "#98be65" bold)
         (org-level-4 1.4 "#da8548" semi-bold)
         (org-level-5 1.3 "#5699af" normal)
         (org-level-6 1.2 "#a9a1e1" normal)
         (org-level-7 1.1 "#46d9ff" normal)
         (org-level-8 1.0 "#ff6c6b" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-dracula ()
  "Enable Dracula colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#8be9fd" ultra-bold)
         (org-level-2 1.6 "#bd93f9" extra-bold)
         (org-level-3 1.5 "#50fa7b" bold)
         (org-level-4 1.4 "#ff79c6" semi-bold)
         (org-level-5 1.3 "#9aedfe" normal)
         (org-level-6 1.2 "#caa9fa" normal)
         (org-level-7 1.1 "#5af78e" normal)
         (org-level-8 1.0 "#ff92d0" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-gruvbox-dark ()
  "Enable Gruvbox Dark colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#458588" ultra-bold)
         (org-level-2 1.6 "#b16286" extra-bold)
         (org-level-3 1.5 "#98971a" bold)
         (org-level-4 1.4 "#fb4934" semi-bold)
         (org-level-5 1.3 "#83a598" normal)
         (org-level-6 1.2 "#d3869b" normal)
         (org-level-7 1.1 "#d79921" normal)
         (org-level-8 1.0 "#8ec07c" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-monokai-pro ()
  "Enable Monokai Pro colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#78dce8" ultra-bold)
         (org-level-2 1.6 "#ab9df2" extra-bold)
         (org-level-3 1.5 "#a9dc76" bold)
         (org-level-4 1.4 "#fc9867" semi-bold)
         (org-level-5 1.3 "#ff6188" normal)
         (org-level-6 1.2 "#ffd866" normal)
         (org-level-7 1.1 "#78dce8" normal)
         (org-level-8 1.0 "#ab9df2" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-nord ()
  "Enable Nord colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#81a1c1" ultra-bold)
         (org-level-2 1.6 "#b48ead" extra-bold)
         (org-level-3 1.5 "#a3be8c" bold)
         (org-level-4 1.4 "#ebcb8b" semi-bold)
         (org-level-5 1.3 "#bf616a" normal)
         (org-level-6 1.2 "#88c0d0" normal)
         (org-level-7 1.1 "#81a1c1" normal)
         (org-level-8 1.0 "#b48ead" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-oceanic-next ()
  "Enable Oceanic Next colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#6699cc" ultra-bold)
         (org-level-2 1.6 "#c594c5" extra-bold)
         (org-level-3 1.5 "#99c794" bold)
         (org-level-4 1.4 "#fac863" semi-bold)
         (org-level-5 1.3 "#5fb3b3" normal)
         (org-level-6 1.2 "#ec5f67" normal)
         (org-level-7 1.1 "#6699cc" normal)
         (org-level-8 1.0 "#c594c5" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-palenight ()
  "Enable Palenight colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#82aaff" ultra-bold)
         (org-level-2 1.6 "#c792ea" extra-bold)
         (org-level-3 1.5 "#c3e88d" bold)
         (org-level-4 1.4 "#ffcb6b" semi-bold)
         (org-level-5 1.3 "#a3f7ff" normal)
         (org-level-6 1.2 "#e1acff" normal)
         (org-level-7 1.1 "#f07178" normal)
         (org-level-8 1.0 "#ddffa7" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-solarized-dark ()
  "Enable Solarized Dark colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#268bd2" ultra-bold)
         (org-level-2 1.6 "#d33682" extra-bold)
         (org-level-3 1.5 "#859900" bold)
         (org-level-4 1.4 "#b58900" semi-bold)
         (org-level-5 1.3 "#cb4b16" normal)
         (org-level-6 1.2 "#6c71c4" normal)
         (org-level-7 1.1 "#2aa198" normal)
         (org-level-8 1.0 "#657b83" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-solarized-light ()
  "Enable Solarized Light colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#268bd2" ultra-bold)
         (org-level-2 1.6 "#d33682" extra-bold)
         (org-level-3 1.5 "#859900" bold)
         (org-level-4 1.4 "#b58900" semi-bold)
         (org-level-5 1.3 "#cb4b16" normal)
         (org-level-6 1.2 "#6c71c4" normal)
         (org-level-7 1.1 "#2aa198" normal)
         (org-level-8 1.0 "#657b83" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun dt/org-colors-tomorrow-night ()
  "Enable Tomorrow Night colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#81a2be" ultra-bold)
         (org-level-2 1.6 "#b294bb" extra-bold)
         (org-level-3 1.5 "#b5bd68" bold)
         (org-level-4 1.4 "#e6c547" semi-bold)
         (org-level-5 1.3 "#cc6666" normal)
         (org-level-6 1.2 "#70c0ba" normal)
         (org-level-7 1.1 "#b77ee0" normal)
         (org-level-8 1.0 "#9ec400" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

;; Load our desired dt/org-colors-* theme on startup
(dt/org-colors-doom-one)
#+end_src

** Org-export
We need ox-man for "Org eXporting" to manpage format and ox-gemini for exporting to gemtext (for the gemini protocol).

=NOTE=: I also enable ox-publish for converting an Org site into an HTML site, but that is done in init.el (org +publish).

#+begin_src emacs-lisp :tangle no
(use-package ox-man)
(use-package ox-gemini)
#+end_src

** Org-journal
#+begin_src emacs-lisp :tangle yes
(setq org-journal-dir "~/–ì—Ä–∏–º—É–∞—Ä/–î–Ω–µ–≤–Ω–∏–∫/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

** Org-publish
#+begin_src emacs-lisp :tangle no
(setq org-publish-use-timestamps-flag nil)
(setq org-export-with-broken-links t)
(setq org-publish-project-alist
      '(("distro.tube without manpages"
         :base-directory "~/nc/gitlab-repos/distro.tube/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/"
         :recursive t
         :exclude "org-html-themes/.*\\|man-org/man*"
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man0p"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man0p/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man0p/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man1"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man1/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man1/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man1p"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man1p/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man1p/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man2"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man2/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man2/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man3"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man3/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man3/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man3p"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man3p/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man3p/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man4"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man4/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man4/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man5"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man5/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man5/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man6"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man6/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man6/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man7"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man7/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man7/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("man8"
         :base-directory "~/nc/gitlab-repos/distro.tube/man-org/man8/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/distro.tube/html/man-org/man8/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)
         ("org-static"
         :base-directory "~/Org/website"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/public_html/"
         :recursive t
         :exclude ".*/org-html-themes/.*"
         :publishing-function org-publish-attachment)
         ("dtos.dev"
         :base-directory "~/nc/gitlab-repos/dtos.dev/"
         :base-extension "org"
         :publishing-directory "~/nc/gitlab-repos/dtos.dev/html/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4             ; Just the default for this project.
         :auto-preamble t)

      ))
#+end_src
** Org-download
drag&drop functionality
#+begin_src emacs-lisp :tangle yes
(setq org-download-image-dir "~/–ì—Ä–∏–º—É–∞—Ä/–í–ª–æ–∂–µ–Ω–∏—è/")
#+end_src
** Org-roam
[[https://github.com/org-roam/org-roam][Org-roam]] is a plain-text knowledge management system.  Org-roam borrows principles from the =Zettelkasten= method, providing a solution for non-hierarchical note-taking.  It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.

| COMMAND                | DESCRIPTION                        | KEYBINDING |
|------------------------+------------------------------------+------------|
| completion-at-point    | /Completion of node-insert at point/ | SPC n r c  |
| org-roam-node-find     | /Find node or create a new one/      | SPC n r f  |
| org-roam-graph         | /Show graph of all nodes/            | SPC n r g  |
| org-roam-node-insert   | /Insert link to a node/              | SPC n r i  |
| org-roam-capture       | /Capture to node/                    | SPC n r n  |
| org-roam-buffer-toggle | /Toggle roam buffer/                 | SPC n r r  |

*** Variables
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-roam-directory org-directory
        org-roam-graph-viewer "/usr/bin/firefox"  ; TODO –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ qutebrowser
        +org-roam-auto-backlinks-buffer t))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

;; (map! :leader
;;       (:prefix ("n r" . "org-roam")
;;        :desc "Completion at point" "c" #'completion-at-point
;;        :desc "Find node"           "f" #'org-roam-node-find
;;        :desc "Show graph"          "g" #'org-roam-ui-open
;;        :desc "Show local graph"    "G" #'org-roam-ui-node-local
;;        :desc "Insert node"         "i" #'org-roam-node-insert
;;        :desc "Capture to node"     "n" #'org-roam-capture
;;        :desc "Toggle roam buffer"  "r" #'org-roam-buffer-toggle))
#+end_src
*** Org-roam-capture
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-roam-capture-templates
        `(("c" "–ó–∞–ø–∏—Å–∫–∞, –ß–µ—Ä–Ω–æ–≤–∏–∫" plain "%?\n* –°—Å—ã–ª–∫–∏"
           :target (file+head
                    "–ó–∞–º–µ—Ç–∫–∏/–í—Ö–æ–¥—è—â–∏–µ/%<%Y%m%d%H%M%S>.org"
                    ":PROPERTIES:
:CDATE:     %U
:END:
,#+title: ${title}
,#+date: %U
,#+notetype: %^{–¢–∏–ø –∑–∞–º–µ—Ç–∫–∏|–∑–∞–ø–∏—Å–∫–∞|—á–µ—Ä–Ω–æ–≤–∏–∫}
,#+filetags: %^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("f" "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è, –ú—ã—Å–ª—å, –¶–∏—Ç–∞—Ç–∞" plain "%?\n* –°—Å—ã–ª–∫–∏\n** –°–≤—è–∑–∏\n** –ò—Å—Ç–æ—á–Ω–∏–∫–∏"
           :target (file+head
                    "–ó–∞–º–µ—Ç–∫–∏/%<%Y%m%d%H%M%S>-${slug}.org"
                    ":PROPERTIES:
:CDATE:     %U
:ACCESS:   %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: %^{–Ø–∑—ã–∫|—Ä—É—Å—Å–∫–∏–π|english|fran√ßais|‰∏≠Êñá}
,#+notetype: %^{–¢–∏–ø –∑–∞–º–µ—Ç–∫–∏|—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è|–º—ã—Å–ª—å|—Ü–∏—Ç–∞—Ç–∞}
,#+filetags: %^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("n" "–ó–∞–º–µ—Ç–∫–∞, –°—Ç–∞—Ç—å—è, –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ" plain "* ${title}\n%?\n* –°—Å—ã–ª–∫–∏"
           :target (file+head
                    "–ó–∞–º–µ—Ç–∫–∏/%<%Y%m%d%H%M%S>-${slug}.org"
                    ":PROPERTIES:
:CDATE:     %U
:ACCESS:   %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: —Ä—É—Å—Å–∫–∏–π
,#+notetype: %^{–¢–∏–ø –∑–∞–º–µ—Ç–∫–∏|–∑–∞–º–µ—Ç–∫–∞|—Å—Ç–∞—Ç—å—è|—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ}
,#+filetags: %^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("a" "–ö–æ–Ω—Å–ø–µ–∫—Ç" plain "* ${title}\n%?\n* –ò—Å—Ç–æ—á–Ω–∏–∫\n%A\n* –°—Å—ã–ª–∫–∏\n* TODO –î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"
           :target (file+head
                    "–ó–∞–º–µ—Ç–∫–∏/%<%Y%m%d%H%M%S>-${slug}.org"
                    ":PROPERTIES:
:CDATE:     %U
:ACCESS:   %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: %^{–Ø–∑—ã–∫|—Ä—É—Å—Å–∫–∏–π|english|fran√ßais|‰∏≠Êñá}
,#+notetype: –∫–æ—Å–ø–µ–∫—Ç
,#+sourcetype: %^{–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞|—Å—Ç–∞—Ç—å—è|–≤–∏–¥–µ–æ|–∞—É–¥–∏–æ|–∑–∞–Ω—è—Ç–∏–µ}
,#+filetags: %^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("x" "–ö–æ–ø–∏—è" plain "* –ò—Å—Ç–æ—á–Ω–∏–∫\n%A\n* ${title}\n%?"
           :target (file+head
                    "–ó–∞–º–µ—Ç–∫–∏/%<%Y%m%d%H%M%S>-${slug}.org"
                    ":PROPERTIES:
:CDATE:     %U
:ACCESS:   %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: %^{–Ø–∑—ã–∫|—Ä—É—Å—Å–∫–∏–π|english|fran√ßais|‰∏≠Êñá}
,#+notetype: –∫–æ–ø–∏—è
,#+sourcetype: %^{–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞|—Å—Ç–∞—Ç—å—è|–≤–∏–¥–µ–æ|–∞—É–¥–∏–æ|–∑–∞–Ω—è—Ç–∏–µ}
,#+filetags: %^G"))
          ("o" "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
          ("oa" "–¶–µ–Ω–Ω–æ—Å—Ç—å" plain
           "* –¶–µ–ª–∏
%?
,* –¶–µ–Ω–Ω–æ—Å—Ç–∏
,* –ü—Ä–æ–µ–∫—Ç—ã
,* –ü—Ä–∏–≤—ã—á–∫–∏
:PROPERTIES:
:CATEGORY: –ü—Ä–∏–≤—ã—á–∫–∞
:VISIBILITY: content
:END:
,* –ó–∞–º–µ—Ç–∫–∏
,* –ó–∞–¥–∞—á–∏
:PROPERTIES:
:VISIBILITY: content
:END:"

           :target (file+head
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–¶–µ–Ω–Ω–æ—Å—Ç–∏/area-${slug}.org"
                    ":PROPERTIES:
:CDATE:         %U
:ACCESS:       %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:CATEGORY:     %^{Category –¥–ª—è Agenda}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: —Ä—É—Å—Å–∫–∏–π
,#+notetype: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
,#+filetags: :${slug}:%^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("op" "–ü—Ä–æ–µ–∫—Ç" plain
           "* –¶–µ–ª–∏
%?
,* –ó–∞–º–µ—Ç–∫–∏
,* –ü—Ä–æ–µ–∫—Ç—ã
,* –ó–∞–¥–∞—á–∏
:PROPERTIES:
:VISIBILITY: content
:END:"
           :target (file+head
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü—Ä–æ–µ–∫—Ç—ã/${title}/proj-${slug}.org"
                    ":PROPERTIES:
:CDATE:         %U
:ACCESS:       %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:CATEGORY:     %^{Category –¥–ª—è Agenda}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: —Ä—É—Å—Å–∫–∏–π
,#+notetype: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
,#+filetags: :${slug}:%^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("or" "–ü–ª–∞–Ω" plain "* –¶–µ–ª–∏\n%?\n* –ü–ª–∞–Ω\n* –ó–∞–º–µ—Ç–∫–∏\n* –ü—Ä–æ–µ–∫—Ç—ã"
           :target (file+head
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/plan-${slug}.org"
                    ":PROPERTIES:
:CDATE:         %U
:ACCESS:       %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: —Ä—É—Å—Å–∫–∏–π
,#+notetype: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
,#+filetags: :${slug}:%^G")
           :unnarrowed t
           :empty-lines-before 1)
          ("p" "Person" plain "%?"
           :target (file+head
                    "–õ—é–¥–∏/person-${slug}.org"
                    ":PROPERTIES:
:CDATE:         %U
:ACCESS:       %^{–î–æ—Å—Ç—É–ø|public|private|personal|confidentional}
:ROAM_ALIASES: %^{–°–∏–Ω–æ–Ω–∏–º—ã (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)}
:END:
,#+title: ${title}
,#+author: %n
,#+date: %U
,#+language: —Ä—É—Å—Å–∫–∏–π
,#+notetype: —á–µ–ª–æ–≤–µ–∫
,#+filetags:

,* ${title}
:PROPERTIES:
:ALIAS: %\\2
:EMAIL: %^{Email}
:PHONE: %^{Phone|+7}
:ADDRESS: %^{Address}
:BIRTHDAY: %^{Birtday}
:NICKNAME: %^{IRC nickname}
:END:
,** –ó–∞–º–µ—Ç–∫–∏
,** –ü—Ä–æ–µ–∫—Ç—ã
,** –ó–∞–¥–∞—á–∏
:PROPERTIES:
:VISIBILITY: content
:END:")
           :unnarrowed t))))
#+end_src
**** TODO Org-roam-capture-templates tangle
#+begin_src emacs-lisp :tangle yes
(defun extract-org-roam-templates ()
  "Extract org-roam-capture-templates from config.org and save to org-roam-templates.el"
(let ((config-file (expand-file-name "config.org" doom-user-dir))
        (output-file (expand-file-name "org-roam-templates.el" doom-user-dir))
        (template-section nil))
    ;; (message "–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: %s" config-file)
    (with-temp-buffer
      ;; –ß–∏—Ç–∞–µ–º config.org
      (insert-file-contents config-file)
      (goto-char (point-min))
      ;; (message "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—â–µ–º —à–∞–±–ª–æ–Ω—ã...")

      ;; –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
      (when (re-search-forward "(setq org-roam-capture-templates" nil t)
        ;; (message "–ù–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ: %d" (line-number-at-pos))
        (beginning-of-line)
        (setq template-section (buffer-substring (point) (progn (forward-sexp) (point)))))

      ;; –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
      ;; (when template-section
        ;; (message "–®–∞–±–ª–æ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ %s" output-file)
        (with-temp-file output-file
          ;; (insert ";; Automatically extracted org-roam-capture-templates\n")
          (insert template-section)
          (insert "\n")))))

;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config.org
(defun auto-extract-org-roam-templates ()
  "Run extract-org-roam-templates when saving config.org."
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.config/doom/config.org"))
    (message "Extracting org-roam-templates")
    (extract-org-roam-templates)))

(add-hook 'after-save-hook #'auto-extract-org-roam-templates)

#+end_src

Test
#+begin_src emacs-lisp :tangle no
(message "Current after-save-hook: %s" after-save-hook)
#+end_src
** TODO Org-brain
#+begin_src emacs-lisp :tangle no
(after! org
  (setq org-brain-path org-directory))
#+end_src
** TODO Journal
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq +org-capture-journal-file (expand-file-name "–î–Ω–µ–≤–Ω–∏–∫" org-directory)))
#+end_src
** TODO Contacts
#+begin_src emacs-lisp :tangle yes
(after! org
  (defvar org-contacts-directory (expand-file-name "–ö–æ–Ω—Ç–∞–∫—Ç—ã/" org-directory) "Directory with Org Contacts files")
  (setq org-contacts-files (directory-files-recursively org-contacts-directory "\.org$")))
#+end_src
** TODO Input Method
#+begin_src emacs-lisp :tangle no
(defun my/org-set-input-method-from-language ()
  "Set input method in org-mode according to #+LANGUAGE value."
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^#\\+language: +\\(\\w+\\)" nil t)
        (let* ((lang (match-string 1))
               (input-method
                (pcase (downcase lang)
                  ("russian" "russian-computer")
                  ("english" nil)
                  ;; –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                  )))
          (when input-method
            (set-input-method input-method)))))))

(add-hook 'org-mode-hook #'my/org-set-input-method-from-language)

#+end_src
** TODO LaTeX
#+begin_src emacs-lisp :tangle yes
(setq org-startup-with-latex-preview t)
#+end_src
* Babel
#+begin_src emacs-lisp :tangle yes
(after! ob-plantuml
  (setq plantuml-jar-path nil)
  (setq org-plantuml-jar-path plantuml-jar-path)
  (setq plantuml-exec-mode 'executable)
  (setq org-plantuml-exec-mode plantuml-exec-mode))

#+end_src
* Auto-commit
–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ì—Ä–∏–º—É–∞—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç—è—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç. –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å –≤–µ—Ç–∫–∞–º–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ–Ω—Ü–∏–π, —è –¥–æ–±–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
#+begin_src emacs-lisp :tangle yes
(defvar my/autocommit-timer "auto-commit-grimuar.timer" "–ù–∞–∑–≤–∞–Ω–∏–µ auto-commit —Ç–∞–π–º–µ—Ä–∞")

(defun my/start-autocommit ()
  "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ systemd."
  (interactive)
  (let ((output (shell-command-to-string (format "systemctl --user start %s && echo 'Autocommit timer started'" my/autocommit-timer))))
    (message "%s" (string-trim output))))

(defun my/stop-autocommit ()
  "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ systemd."
  (interactive)
  (let ((output (shell-command-to-string (format "systemctl --user stop %s && echo 'Autocommit timer stopped'" my/autocommit-timer))))
    (message "%s" (string-trim output))))

(defun my/toggle-autocommit ()
  "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ systemd."
  (interactive)
  (let ((exit-code (call-process-shell-command
                    (format "systemctl --user is-active --quiet %s" my/autocommit-timer))))
    (if (eq exit-code 0)
        (my/stop-autocommit)
        (my/start-autocommit))))
#+end_src

–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
#+begin_src emacs-lisp :tangle yes
(defvar my/autocommit-service "auto-commit-grimuar.service"
  "–ò–º—è systemd —Å–µ—Ä–≤–∏—Å–∞, –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç –æ–¥–∏–Ω —Ä–∞–∑.")

(defun my/run-autocommit-once ()
  "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç —á–µ—Ä–µ–∑ systemd service."
  (interactive)
  (let ((output (shell-command-to-string (format "systemctl --user start %s && echo '–ì—Ä–∏–º—É–∞—Ä auto-commit done'" my/autocommit-service))))
    (message "%s" (string-trim output))))
#+end_src

–ë–∏–Ω–¥–∏–Ω–≥–∏
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix "n" ;; notes menu
       (:prefix ("g" . "git")
       :desc "Enable autosave"        "e" #'my/start-autocommit
       :desc "Disable autosave"       "d" #'my/stop-autocommit
       :desc "Toggle autosatve"       "t" #'my/toggle-autocommit
       :desc "Save"                   "s" #'my/run-autocommit-once)))

(map! :leader
      (:prefix "t"  ;; toggle menu
       :desc "Toggle notes autosave"  "n" #'my/toggle-autocommit))

#+end_src
* Dired
** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

=NOTE=: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:
#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example
* YASnippet
#+begin_src emacs-lisp
(after! yasnippet
  (setq yas-snippet-dirs '("~/.config/doom/snippets"))
  )
#+end_src
* Projects
#+begin_src emacs-lisp
(setq projectile-project-search-path `("~/Documents/Code/" "~/source/" "~/.suckless/" "~/.config/"))
#+end_src
* Workspaces
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix "TAB"
       :desc "Move workspace right"     [left]  #'+workspace/swap-left
       :desc "Move workspace left"      [right] #'+workspace/swap-right))
#+end_src
* Languages
** Python
#+begin_src emacs-lisp :tangle yes
(map! :map python-mode-map
      :localleader
      :desc "run REPL"                "s" #'run-python                ;; SPC m s ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å REPL
      :desc "restart REPL"            "R" #'python-shell-restart      ;; SPC m r ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å REPL
      :desc "run"                     "c" #'python-shell-send-buffer  ;; SPC m c ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç
      :desc "run region"              "r" #'python-shell-send-region  ;; SPC m r ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
      :desc "run function"            "j" #'python-shell-send-defun)  ;; SPC m j ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ REPL
#+end_src
* TODO CALENDAR
Let's make a 12-month calendar available so we can have a calendar app that, when we click on time/date in xmobar, we get a nice 12-month calendar to view.

This is a modification of: http://homepage3.nifty.com/oatu/emacs/calendar.html
See also: https://stackoverflow.com/questions/9547912/emacs-calendar-show-more-than-3-months

#+begin_src emacs-lisp :tangle no
(defun dt/year-calendar (&optional year)
  (interactive)
  (require 'calendar)
  (let* (
      (current-year (number-to-string (nth 5 (decode-time (current-time)))))
      (month 0)
      (year (if year year (string-to-number (format-time-string "%Y" (current-time))))))
    (switch-to-buffer (get-buffer-create calendar-buffer))
    (when (not (eq major-mode 'calendar-mode))
      (calendar-mode))
    (setq displayed-month month)
    (setq displayed-year year)
    (setq buffer-read-only nil)
    (erase-buffer)
    ;; horizontal rows
    (dotimes (j 4)
      ;; vertical columns
      (dotimes (i 3)
        (calendar-generate-month
          (setq month (+ month 1))
          year
          ;; indentation / spacing between months
          (+ 5 (* 25 i))))
      (goto-char (point-max))
      (insert (make-string (- 10 (count-lines (point-min) (point-max))) ?\n))
      (widen)
      (goto-char (point-max))
      (narrow-to-region (point-max) (point-max)))
    (widen)
    (goto-char (point-min))
    (setq buffer-read-only t)))

(defun dt/scroll-year-calendar-forward (&optional arg event)
  "Scroll the yearly calendar by year in a forward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (unless arg (setq arg 0))
  (save-selected-window
    (if (setq event (event-start event)) (select-window (posn-window event)))
    (unless (zerop arg)
      (let* (
              (year (+ displayed-year arg)))
        (dt/year-calendar year)))
    (goto-char (point-min))
    (run-hooks 'calendar-move-hook)))

(defun dt/scroll-year-calendar-backward (&optional arg event)
  "Scroll the yearly calendar by year in a backward direction."
  (interactive (list (prefix-numeric-value current-prefix-arg)
                     last-nonmenu-event))
  (dt/scroll-year-calendar-forward (- (or arg 1)) event))

(map! :leader
      :desc "Scroll year calendar backward" "<left>" #'dt/scroll-year-calendar-backward
      :desc "Scroll year calendar forward" "<right>" #'dt/scroll-year-calendar-forward)

(defalias 'year-calendar 'dt/year-calendar)
#+end_src

Let's also play around with calfw.
#+begin_src emacs-lisp :tangle no
#+end_src


#+begin_src emacs-lisp
(use-package! calfw)
(use-package! calfw-org)  ; for Org and Agenda
(use-package! calfw-ical) ; for Google Calendar
;; (use-package! calfw-cal)  ; for diary
(load "$DOOMDIR/secrets.el")

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; org-agenda source
    (cfw:org-create-file-source "ecal" (expand-file-name "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.org" org-agenda-directory) "Cyan")  ; other org source
    (cfw:ical-create-source "My gcal" mia-google-calendar-url "IndianRed") ; google calendar ICS
   )))
#+end_src

* TODO EDNC (Notifications)
The Emacs Desktop Notification Center (EDNC) is an Emacs package written in pure Lisp that implements a desktop notifications service according to the freedesktop.org specification. EDNC aspires to be a small, but flexible drop-in replacement of standalone daemons like dunst.

=NOTE=: Ensure that no other notification daemon (such as dunst) is active to use EDNC.

#+begin_src emacs-lisp :tangle no
(ednc-mode 1)

(defun show-notification-in-buffer (old new)
  (let ((name (format "Notification %d" (ednc-notification-id (or old new)))))
    (with-current-buffer (get-buffer-create name)
      (if new (let ((inhibit-read-only t))
                (if old (erase-buffer) (ednc-view-mode))
                (insert (ednc-format-notification new t))
                (pop-to-buffer (current-buffer)))
        (kill-buffer)))))

(add-hook 'ednc-notification-presentation-functions
          #'show-notification-in-buffer)

(evil-define-key 'normal ednc-view-mode-map
  (kbd "d")   'ednc-dismiss-notification
  (kbd "RET") 'ednc-invoke-action
  (kbd "e")   'ednc-toggle-expanded-view)
#+end_src
* TODO ELFEED
An RSS newsfeed reader for Emacs.

#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-month-ago +unread"
        rmh-elfeed-org-files '("~/.config/doom/elfeed.org")
        elfeed-goodies/entry-pane-size 0.5))

(add-hook 'elfeed-search-mode-hook #'elfeed-update)

(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src
* TODO EMMS
One of the media players available for Emacs is emms, which stands for Emacs Multimedia System.  By default, Doom Emacs does not use 'SPC a',' so the format I use for these bindings is 'SPC a' plus 'key'.

| COMMAND               | DESCRIPTION                       | KEYBINDING |
|-----------------------+-----------------------------------+------------|
| emms-playlist-mode-go | /Switch to the playlist buffer/     | SPC a a    |
| emms-pause            | /Pause the track/                   | SPC a x    |
| emms-stop             | /Stop the track/                    | SPC a s    |
| emms-previous         | /Play previous track in playlist/   | SPC a p    |
| emms-next             | /Play next track in playlist/       | SPC a n    |

#+begin_src emacs-lisp :tangle no
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playing-time 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(map! :leader
      (:prefix ("a" . "EMMS audio player")
       :desc "Go to emms playlist"      "a" #'emms-playlist-mode-go
       :desc "Emms pause track"         "x" #'emms-pause
       :desc "Emms stop track"          "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track"     "n" #'emms-next))
#+end_src
* TODO ERC
ERC is a built-in Emacs IRC client.

| COMMAND | DESCRIPTION                                 | KEYBINDING |
|---------+---------------------------------------------+------------|
| erc-tls | /Launch ERC using more secure TLS connection/ | SPC e E    |

#+begin_src emacs-lisp :tangle no
(map! :leader
      (:prefix ("e". "evaluate/ERC/EWW")
       :desc "Launch ERC with TLS connection" "E" #'erc-tls))

(setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))
      erc-server "irc.libera.chat"
      erc-nick "distrotube"
      erc-user-full-name "Derek Taylor"
      erc-track-shorten-start 24
      erc-autojoin-channels-alist '(("irc.libera.chat" "#archlinux" "#linux" "#emacs"))
      erc-kill-buffer-on-part t
      erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      ;; erc-auto-query 'bury
      )
#+end_src
* TODO EWW
EWW is the Emacs Web Wowser, the builtin browser in Emacs.  Below I set urls to open in a specific browser (eww) with browse-url-browser-function.  By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eval' keybindings).  I chose to use 'SPC s w' for eww-search-words because Doom Emacs uses 'SPC s' for 'search' commands.

#+begin_src emacs-lisp
;; (setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words
      (:prefix ("e" . "ERC/EWW")
       :desc "Eww web browser" "w" #'eww
       :desc "Eww reload page" "R" #'eww-reload))
#+end_src
* TODO EXWM
[[https://github.com/emacs-exwm/exwm][Emacs X Window Manger]]

#+begin_src emacs-lisp :tangle no
(autoload 'exwm-enable "exwm-config.el")
#+end_src
* TODO NOVEL
Doesn't work.
#+begin_src emacs-lisp :tangle no
(use-package! nov
  :hook (nov-mode . variable-pitch-mode)
  :mode ("\\.\\(epub\\|mobi\\)\\'" . nov-mode)
  ;; :config
  ;; (setq nov-save-place-file)
  )

(defun my-nov-font-setup ()
 (face-remap-add-relative 'variable-pitch :family "Roboto"
                                          :height 1.6))
(add-hook 'nov-mode-hook 'my-nov-font-setup)



(require 'justify-kp)
 (setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
  (my-nov-post-html-render-hook)
  (remove-hook 'window-configuration-change-hook
                   'my-nov-window-configuration-change-hook
                   t))

(defun my-nov-post-html-render-hook ()
  (if (get-buffer-window)
    (let ((max-width (pj-line-width))
      buffer-read-only)
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (when (not (looking-at "^[[:space:]]*$"))
          (goto-char (line-end-position))
          (when (> (shr-pixel-column) max-width)
                    (goto-char (line-beginning-position))
                    (pj-justify)))
                (forward-line 1))))
        (add-hook 'window-configuration-change-hook
                  'my-nov-window-configuration-change-hook
                  nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)

(use-package! nov-xwidget
  :demand t
  :after nov
  :config
  (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
  (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src
* TODO PASSWORD STORE
Uses the standard Unix password store "pass".

#+begin_src emacs-lisp :tangle no
(use-package! password-store)
#+end_src
* TODO REGISTERS
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.  The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+begin_src emacs-lisp :tange no
(map! :leader
      (:prefix ("r" . "registers")
       :desc "Copy to register" "c" #'copy-to-register
       :desc "Frameset to register" "f" #'frameset-to-register
       :desc "Insert contents of register" "i" #'insert-register
       :desc "Jump to register" "j" #'jump-to-register
       :desc "List registers" "l" #'list-registers
       :desc "Number to register" "n" #'number-to-register
       :desc "Interactively choose a register" "r" #'counsel-register
       :desc "View a register" "v" #'view-register
       :desc "Window configuration to register" "w" #'window-configuration-to-register
       :desc "Increment register" "+" #'increment-register
       :desc "Point to register" "SPC" #'point-to-register))
#+end_src
* [?] WINNER MODE
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to ‚Äúundo‚Äù (and ‚Äúredo‚Äù) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+begin_src emacs-lisp :tangle no
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner redo" "<right>" #'winner-redo
       :desc "Winner undo" "<left>"  #'winner-undo))
#+end_src
